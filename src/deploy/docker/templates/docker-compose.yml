version: "3.7"

services:
  application:
    container_name: ${_Values_root_name}-application
    image:  ${_Values_image_repository}${_Values_server_arch}:${_Values_image_tag}
    restart: 'no'
    ports:
      - "${_Values_service_port}:${_Values_service_port}"
    command: -Xmx32m

    healthcheck:
      test: "curl -f http://localhost:${_Values_service_port}/actuator/health || exit 1"
      interval: 5s
      timeout: 10s
      retries: 5

    volumes:
      - tmp:/tmp
      - applogs:/usr/share/logs
    networks:
      - ${_Values_root_name}-net
    environment:
      #application
      TZ: Europe/Berlin
      server.port: "${_Values_service_port}"
      server.tomcat.threads.max: "20"
      server.forward-headers-strategy: FRAMEWORK

      #monitoring
      management.endpoint.health.show-details: always
      management.endpoints.web.exposure.include: "health,heapdump,circuitbreakers,prometheus"

      #tracing
      quarkus.otel.exporter.otlp.traces.endpoint: "http://host.docker.internal:4317"
      quarkus.application.name: "core-service"

      #persistence
      quarkus.datasource.jdbc.url: "jdbc:postgresql://postgres:5432/core"
      quarkus.datasource.jdbc.max-size: "10"

      multi-tenancy.tenants: "0,5"
      multi-tenancy.schema-prefix: "core_"
      database.provisioning.goals: "-migrate -import-demo-data"

      #sec
      security.authentication.enabled: "true"

      #s3
      spring.cloud.aws.s3.endpoint: "http://s3minio:9000"
      spring.cloud.aws.s3.enabled: "true"

      #secrets
      spring.security.oauth2.client-id: "oauth2-proxy"
      spring.security.oauth2.client-secret: "none"

      quarkus.datasource.username: "core-service"
      quarkus.datasource.password: "core-service"

      #log levels
      logging.level.root: "WARN"
      logging.level.org.goafabric: "INFO"
      logging.level.org.springframework: "INFO"
      logging.level.org.flywaydb.core: "INFO"
      logging.level.org.hibernate.SQL:

    depends_on:
      postgres:
        condition: service_healthy

  postgres:
    container_name: ${_Values_root_name}-postgres
    image: postgres:15.3
    restart: 'no'
    ports:
      - 50810:5432
    environment:
      TZ: "Europe/Berlin"
      POSTGRES_DB: "core"

      #secrets
      POSTGRES_USER: "core-service"
      POSTGRES_PASSWORD: "core-service"

    command: postgres -c 'shared_buffers=64MB' -c 'max_connections=30' -c 'shared_preload_libraries=pg_stat_statements'

    healthcheck:
      test: "sh -c pg_isready"
      interval: 1s
      timeout: 5s
      retries: 5
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - ${_Values_root_name}-net

  s3minio:
    container_name: s3minio
    command: server /data --console-address ':9001'
    image: quay.io/minio/minio:RELEASE.2023-06-29T05-12-28Z
    restart: 'no'
    ports:
      - 9100:9000
      - 9101:9001
    volumes:
      - miniodata:/data
    networks:
      - ${_Values_root_name}-net
    environment:
      TZ: "Europe/Berlin"

  jaeger:
    container_name: jaeger
    image:  jaegertracing/all-in-one:1.42.0
    restart: 'no'
    ports:
      - "16686:16686"
      - "14268:14268"
      - "9411:9411"
      - "4317:4317"
      - "4318:4318"
    environment:
      - TZ=Europe/Berlin
      - COLLECTOR_OTLP_ENABLED=true
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
    networks:
      - ${_Values_root_name}-net

  nginx:
    container_name: ${_Values_root_name}-nginx
    image: nginx:1.22.1
    restart: 'no'
    ports:
      - 8080:80
    networks:
      - ${_Values_root_name}-net
    volumes:
      - ./nginx/nginx${_Values_nginx_oidc}.conf:/etc/nginx/nginx.conf
    depends_on:
      application:
        condition: service_started

volumes:
    tmp:
    applogs:
    tmp_catalog:
    applogs_catalog:
    pgdata:
    kcdata:
    miniodata:

networks:
  core-service-net:
    driver: bridge